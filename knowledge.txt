**** This doc contains some information that I learnt while exploring the LLVM Passes ****

- Return type of the getName() method is "StringRef". This method returns the name of the Variable on the LHS. So if you want to store this variable name in a map for constant propagation, then use map(StringRef, int)

- The `getPointerOperand()` function is a member function of the `StoreInst` class in LLVM's IR (Intermediate Representation) library. This function retrieves the pointer operand of the store instruction.
In LLVM IR, a store instruction is used to store a value in memory. It typically has two operands:

1. **Pointer Operand**: This represents the memory location (usually an address) where the value will be stored.
2. **Value Operand**: This represents the value that will be stored into memory.

For example, consider the following LLVM IR code snippet:

```
store i32 10, i32* %ptr
```

In this snippet:
- `i32 10` is the value operand (the integer value `10`).
- `i32* %ptr` is the pointer operand (the pointer to an integer).

So, when you call `getPointerOperand()` on a `StoreInst` object, it returns the pointer operand of that store instruction.



- In Branch instruction, the variable on which the Comparison will take place is the 0th operand, then 1st operand is the label to match
  when the condition is True and 2nd operand is the label to match when the condition is false.
  >> If the Branch instruction is unconditional, then there will be just one operand.


- TOP : This is used when some variable is uninitialized. Example: Varibales in Alloca instructions will have TOP as value.
- BOTTOM : This is used to represent variable which have some value, but we can't gaurantee that the value is constant. 
           Example: Scanf() instructions 

###################################################################################################################################################################################################
Commands to run a pass:
###################################################################################################################################################################################################
1. Create a new folder in : /home/c310/ipaco/llvm-project/llvm/lib/Transforms, Make changes to the .cpp file regarding the pass
Note: static RegisterPass<alias> X("alias", "This pass performs pointer analysis");  >> Here, "alias"(X("alias"<<This one)) will be the name of the pass, as we have registered this pass by this name.

2. Add the details of the pass in the "CMakeLists.txt" file of /home/c310/ipaco/llvm-project/llvm/lib/Transforms

3. Run the "make -j" command in /home/c310/ipaco/llvm-project/build/lib/Transforms folder to get the .SO file related to the pass.

4. Command to run the pass: 
- /home/c310/ipaco/llvm-project/build/bin/opt -enable-new-pm=0 -load /home/c310/ipaco/llvm-project/build/lib/LLVMDemo.so -demo file1.ll : This command was executed where the .ll file was present


Extra: 
- Path of the build directory: /home/c310/ipaco/llvm-project/build
